Test pour Chinese Restaurant Process:

chinese_restaurant_process(10,1)

[1, 2]
[1, 2, 3]
[1, 2, 3, 2]
[1, 2, 3, 2, 2]
[1, 2, 3, 2, 2, 2]
[1, 2, 3, 2, 2, 2, 2]
[1, 2, 3, 2, 2, 2, 2, 4]
[1, 2, 3, 2, 2, 2, 2, 4, 2]
[1, 2, 3, 2, 2, 2, 2, 4, 2, 3]
[1, 2, 3, 2, 2, 2, 2, 4, 2, 3]


chinese_restaurant_process(10,2)

[1, 1]
[1, 1, 2]
[1, 1, 2, 3]
[1, 1, 2, 3, 1]
[1, 1, 2, 3, 1, 1]
[1, 1, 2, 3, 1, 1, 4]
[1, 1, 2, 3, 1, 1, 4, 2]
[1, 1, 2, 3, 1, 1, 4, 2, 1]
[1, 1, 2, 3, 1, 1, 4, 2, 1, 1]
[1, 1, 2, 3, 1, 1, 4, 2, 1, 1]


chinese_restaurant_process(10,5)

[1, 2]
[1, 2, 3]
[1, 2, 3, 4]
[1, 2, 3, 4, 1]
[1, 2, 3, 4, 1, 1]
[1, 2, 3, 4, 1, 1, 2]
[1, 2, 3, 4, 1, 1, 2, 5]
[1, 2, 3, 4, 1, 1, 2, 5, 6]
[1, 2, 3, 4, 1, 1, 2, 5, 6, 3]
[1, 2, 3, 4, 1, 1, 2, 5, 6, 3]

Tant qu'on augmente alpha , on augmente le nombre de tables distinctes.

Tests pour le Black MacQueen urn scheme :

j'ai modifi√© l'algorithme en mettant une distribution gaussienne unitaire des couleurs distinctes:

def Black_MacQueen_urn_Scheme(couleurs,nbrBalls,alpha):
    #couleurs=[]
    for i in range (nbrBalls-1):
        couleurs.append(i)
    if nbrBalls<=0:
        return []
    balls_dans_urne=[0.05]
    for i in range (nbrBalls-1):
        if random()<alpha/(alpha+i):
            balls_dans_urne.append(scipy.stats.norm.pdf(i,0,1))
            print(balls_dans_urne)
        else:
            choisir_ball=choice(balls_dans_urne)
            balls_dans_urne.append(choisir_ball)
            print(balls_dans_urne)
    return balls_dans_urne
    
Les tests :

y = Black_MacQueen_urn_Scheme([],10,2)
N = len(y)
x = range(N)
width = 1/1.5
plt.bar(x, y, width, color="blue")

[0.5, 0.3989422804014327]
[0.5, 0.3989422804014327, 0.24197072451914337]
[0.5, 0.3989422804014327, 0.24197072451914337, 0.053990966513188063]
[0.5, 0.3989422804014327, 0.24197072451914337, 0.053990966513188063, 0.24197072451914337]
[0.5, 0.3989422804014327, 0.24197072451914337, 0.053990966513188063, 0.24197072451914337, 0.053990966513188063]
[0.5, 0.3989422804014327, 0.24197072451914337, 0.053990966513188063, 0.24197072451914337, 0.053990966513188063, 0.24197072451914337]
[0.5, 0.3989422804014327, 0.24197072451914337, 0.053990966513188063, 0.24197072451914337, 0.053990966513188063, 0.24197072451914337, 0.5]
[0.5, 0.3989422804014327, 0.24197072451914337, 0.053990966513188063, 0.24197072451914337, 0.053990966513188063, 0.24197072451914337, 0.5, 0.053990966513188063]
[0.5, 0.3989422804014327, 0.24197072451914337, 0.053990966513188063, 0.24197072451914337, 0.053990966513188063, 0.24197072451914337, 0.5, 0.053990966513188063, 0.24197072451914337]

Graphe 1 dans le fichier des graphe_Tests

Tests pour le Stick_Breaking:

Stick_breaking(10,3)

[1,
 0.040427748615264554,
 0.0013100651000491643,
 0.00015466715368703767,
 1.2324408585364289e-05,
 3.6314554626697156e-07,
 1.2951657707491458e-08,
 4.518401511853757e-11,
 4.0091551668469986e-13,
 2.6847439439879585e-15]

Graphe 2

Stick_breaking(10,5)

[1,
 0.25075587025275531,
 0.014738350941855691,
 0.00050106015273538478,
 3.0953173784995746e-05,
 5.1638488821858726e-06,
 6.7061771771406205e-08,
 6.9192020115050199e-09,
 1.7717974180725308e-10,
 3.8075056593940629e-12]

Graphe 3

Stick_breaking(10,7)

[1,
 0.12193459168627825,
 5.8912938367695864e-05,
 4.0678585693220169e-06,
 2.6595339579766798e-07,
 4.6738480184460283e-08,
 1.0473131598631791e-10,
 7.6919328156821238e-12,
 2.608136529667944e-13,
 7.3828411671622942e-15]
 
 Graphe 4
